Q1. How do you load a CSV file into a Pandas DataFrame?
import pandas as pd
df = pd.read_csv('file.csv')


Q2. How do you check the data type of a column in a Pandas DataFrame?
# Assuming you want to check the data type of a column named 'column_name'
data_type = df['column_name'].dtype


Q3. How do you select rows from a Pandas DataFrame based on a condition?
# Assuming you want to select rows where column 'column_name' is greater than 5
selected_rows = df[df['column_name'] > 5]


Q4. How do you rename columns in a Pandas DataFrame?
df.rename(columns={'old_name': 'new_name'}, inplace=True)


Q5. How do you drop columns in a Pandas DataFrame?
df.drop(columns=['column1', 'column2'], inplace=True)


Q6. How do you find the unique values in a column of a Pandas DataFrame?
unique_values = df['column_name'].unique()


Q7. How do you find the number of missing values in each column of a Pandas DataFrame?
missing_values_count = df.isnull().sum()


Q8. How do you fill missing values in a Pandas DataFrame with a specific value?
df['column_name'].fillna(value, inplace=True)


Q9. How do you concatenate two Pandas DataFrames?
concatenated_df = pd.concat([df1, df2], axis=0)


Q10. How do you merge two Pandas DataFrames on a specific column?
merged_df = pd.merge(df1, df2, on='common_column')


Q11. How do you group data in a Pandas DataFrame by a specific column and apply an aggregation function?
grouped_data = df.groupby('column_name').agg({'column_to_aggregate': 'function'})


Q12. How do you pivot a Pandas DataFrame?
pivot_table = df.pivot_table(index='index_column', columns='column_to_pivot', values='values_to_show')


Q13. How do you change the data type of a column in a Pandas DataFrame?
df['column_name'] = df['column_name'].astype('new_type')


Q14. How do you sort a Pandas DataFrame by a specific column?
sorted_df = df.sort_values(by='column_name', ascending=False)


Q15. How do you create a copy of a Pandas DataFrame?
df_copy = df.copy()


Q16. How do you filter rows of a Pandas DataFrame by multiple conditions?
filtered_rows = df[(df['column1'] > 5) & (df['column2'] == 'value')]


Q17. How do you calculate the mean of a column in a Pandas DataFrame?
column_mean = df['column_name'].mean()


Q18. How do you calculate the standard deviation of a column in a Pandas DataFrame?
column_std = df['column_name'].std()


Q19. How do you calculate the correlation between two columns in a Pandas DataFrame?
correlation = df['column1'].corr(df['column2'])


Q20. How do you select specific columns in a DataFrame using their labels?
selected_columns = df[['column1', 'column2']]


Q21. How do you select specific rows in a DataFrame using their indexes?
selected_rows = df.loc[[1, 3, 5]]


Q22. How do you sort a DataFrame by a specific column?
sorted_df = df.sort_values(by='column_name')


Q23. How do you create a new column in a DataFrame based on the values of another column?
df['new_column'] = df['existing_column'].apply(lambda x: some_function(x))


Q24. How do you remove duplicates from a DataFrame?
df.drop_duplicates(inplace=True)


Q25. What is the difference between .loc and .iloc in Pandas?
- .loc is label based, which means you can use column labels and row indices to slice and retrieve data from the DataFrame.
- .iloc is integer based, which means you can use integer indices to slice and retrieve data from the DataFrame.
